3a. If passed an argument, exec.c overtakes the current running process and runs the program given as the argument.

3b. If the execve() function runs into some sort of error, like the passed in program doesn't exist, then the original process
maintains control and the final print statement will be executed.

3c. hiltoni@texas:~/Documents/CS324/fork_exec_lab/hw3$ ./exec /bin/cat

3d.
hiltoni@texas:~/Documents/CS324/fork_exec_lab/hw3$ ps -p 29576 -o user,pid,ppid,state,ucmd
USER       PID  PPID S CMD
hiltoni  29576 28311 S exec
hiltoni@texas:~/Documents/CS324/fork_exec_lab/hw3$ ps -p 29576 -o user,pid,ppid,state,ucmd
USER       PID  PPID S CMD
hiltoni  29576 28311 S cat

3e. The pid and ppid are the same between the two outputs, the state is identical between the outputs,
but the command is different. During the initial sleep, the command is exec because it's running the original exec program.
After the execve() call, the command is cat, because as a result of the execve(), the provided cat program overtakes
the original program so the process is now running the cat program.

3f.
hiltoni@florida:~/Documents/CS324/fork_exec_lab/hw3$ ./exec happy
Program "./exec" has pid 13440. Sleeping.
Running exec of "happy"
End of program "./exec".

Since I passed in a non-existent argument, the execve() call tried to run it,,
but couldn,t, so the original process maintained control and thus the final
printf statement was executed.

4a. fork.c starts with a fork() call. If there's an error, it prints an error
statement and exits. If not, both processes continue running the code, executing
some sleep() calls, with some branches only being run by either the parent or
child process.

4b.
A: both
B: child
C: parent
D: neither

4c.
hiltoni@florida:~/Documents/CS324/fork_exec_lab/hw3$ ps -p 14972,14973 -o user,pid,ppid,state,ucmd --forest
USER       PID  PPID S CMD
hiltoni  14972 12783 S fork
hiltoni  14973 14972 S  \_ fork
hiltoni@florida:~/Documents/CS324/fork_exec_lab/hw3$ ps -p 14972,14973 -o user,pid,ppid,state,ucmd --forest
USER       PID  PPID S CMD
hiltoni  14972 12783 S fork
hiltoni  14973 14972 Z  \_ fork <defunct>

4d. Everything was the same in the two outputs except the state and command.
After Section B was done sleeping, the second process became a zombie and was defunct.
Since the parent process didn't wait for the child process to finish, the child
process remains in the process table, in a zombie state.

4e.
ADD: wait(NULL); at line 35

4f.
hiltoni@iowa:~/Documents/CS324/fork_exec_lab/hw3$ ps -p 6882,6883 -o user,pid,ppid,state,ucmd --forest
USER       PID  PPID S CMD
hiltoni   6882  4747 S fork
hiltoni   6883  6882 S  \_ fork
hiltoni@iowa:~/Documents/CS324/fork_exec_lab/hw3$ ps -p 6882,6883 -o user,pid,ppid,state,ucmd --forest
USER       PID  PPID S CMD

4g. By the time Section C was done sleeping, Section B had already finished
sleeping, so the second output doesn't have any processes listed, since all the
processes had finished running.

4h.
hiltoni@iowa:~/Documents/CS324/fork_exec_lab/hw3$ cat fork-output.txt
BEFORE FORK
SECTION A
SECTION B
BEFORE FORK
SECTION A
SECTION C

4i. Since both processes are writing to the same file, it's a little haphazard
when which process writes to the file. However, since the parent waits for the
child, it appears, the child process is writing first to the file, so SECTION B
is written before SECTION C.

4j.
hiltoni@iowa:~/Documents/CS324/fork_exec_lab/hw3$ ./fork
Starting program; process has pid 10498
Section A;  pid 10498
Section A;  pid 10499
Section B
Section B done sleeping
hello from Section B

Section C
Section C done sleeping

5a.
hiltoni@iowa:~/Documents/CS324/fork_exec_lab/hw3$ echo foobar | ./fork /bin/cat
Starting program; process has pid 11283
Section A;  pid 11283
Section A;  pid 11284
Section B
Section B done sleeping
Program "./fork" has pid 11284. Sleeping.
Running exec of "/bin/cat"
foobar
ȋ�y�
Section C
Section C done sleeping

5b.
hiltoni@iowa:~/Documents/CS324/fork_exec_lab/hw3$ echo foobar | ./fork /bin/cat
Starting program; process has pid 12843
Section A;  pid 12843
Section A;  pid 12844
Section B
Section B done sleeping
Program "./fork" has pid 12844. Sleeping.
Running exec of "/bin/cat"

Section C
foobar
Section C done sleeping

cat fork-output.txt
BEFORE FORK
SECTION A
SECTION C
